{"version":3,"sources":["components/Form.js","components/Item.js","components/List.js","components/App.js","index.js"],"names":["FormWrapper","styled","form","Form","props","Input","inputProps","type","placeholder","Button","color","onClick","e","preventDefault","inputValue","document","getElementsByTagName","value","length","addTodo","handleClick","Item","React","useState","isDone","setIsDone","ItemWrapper","li","todo","content","IconButton","variant","deleteTodo","id","ListWrapper","ul","List","todos","map","key","AppWrapper","div","GlodalStyle","createGlobalStyle","reset","App","setTodos","inputText","newTodo","generateId","newId","Math","ceil","random","undefined","find","console","log","concat","filter","ReactDOM","render","getElementById"],"mappings":"gqBAKA,IAAMA,EAAcC,UAAOC,KAAV,KA0CFC,EArBF,SAACC,GAYV,OAEI,kBAACJ,EAAD,KACI,kBAACK,EAAA,EAAD,CAAOC,WAAY,CAAE,aAAc,eAAiBC,KAAK,OAAOC,YAAY,qDAC5E,kBAACC,EAAA,EAAD,CAAQC,MAAM,WAAWH,KAAK,SAASI,QAAS,SAACC,GAAD,OAfpC,SAACA,GACjBA,EAAEC,iBACF,IAAIC,EAAaC,SAASC,qBAAqB,SAAS,GAAGC,MAC3D,GAA0B,IAAtBH,EAAWI,OACX,OAAO,KAEPd,EAAMe,QAAQL,GACdA,EAAc,GAQyCM,CAAYR,KAAnE,kB,y4BCjCZ,IAoDeS,EApDF,SAACjB,GAAW,IAAD,EACQkB,IAAMC,UAAS,GADvB,mBACbC,EADa,KACLC,EADK,KAIdC,EAAczB,UAAO0B,GAAV,KAiCjB,OAEI,kBAACD,EAAD,KACI,2BAAItB,EAAMwB,KAAKC,SACf,kBAACC,EAAA,EAAD,KAAY,kBAAC,IAAD,OACZ,kBAACrB,EAAA,EAAD,CACIsB,QAAQ,YACRrB,MAAOc,EAAS,YAAc,UAC9Bb,QAAS,kBAAMc,GAAWD,KAAUA,EAAS,SAAM,sBACvD,kBAACM,EAAA,EAAD,CAAYnB,QAAS,kBAAMP,EAAM4B,WAAW5B,EAAM6B,MAAK,kBAAC,IAAD,S,kHCjDnE,IAAMC,EAAcjC,UAAOkC,GAAV,KAsBFC,EAjBF,SAAChC,GAEV,OAEI,kBAAC8B,EAAD,KACK9B,EAAMiC,MAAMC,KAAI,SAACV,GAAD,OACb,kBAAC,EAAD,CACIA,KAAMA,EACNW,IAAKX,EAAKK,GACVA,GAAIL,EAAKK,GACTD,WAAY5B,EAAM4B,kB,+kDCXtC,IAAMQ,EAAavC,UAAOwC,IAAV,KAeVC,EAAcC,4BAAH,IAEXC,KAoESC,EA9CH,WAAO,IAAD,EAEQvB,IAAMC,SAAS,CAErC,CAAEU,GAAI,EAAGJ,QAAS,4BAClB,CAAEI,GAAI,EAAGJ,QAAS,4BAClB,CAAEI,GAAI,EAAGJ,QAAS,wBANJ,mBAEXQ,EAFW,KAEJS,EAFI,KAkCjB,OACG,6CACC,kBAACJ,EAAD,MADD,SAEC,kBAACF,EAAD,KACO,4CACA,kBAAC,EAAD,CAAMrB,QA7BE,SAAC4B,GACb,IAUMC,EAAU,CACZf,GAXe,SAAbgB,IACF,IAAMC,EAAQC,KAAKC,KAAqB,IAAhBD,KAAKE,UAE7B,YAAoBC,IADAjB,EAAMkB,MAAK,SAAA3B,GAAI,OAAIA,EAAKK,KAAOiB,KAExCA,EAEAD,IAKPA,GACJpB,QAASkB,GAEbS,QAAQC,IAAIT,GAEZF,EAAST,EAAMqB,OAAOV,OAalB,kBAAC,EAAD,CAAMX,MAAOA,EAAOL,WAVT,SAACC,GAChBa,EAAST,EAAMsB,QAAO,SAAA/B,GAAI,OAAIA,EAAKK,KAAOA,SAM7C,YCjFL2B,IAASC,OAAO,kBAAC,EAAD,MAAS9C,SAAS+C,eAAe,W","file":"static/js/main.a2b82044.chunk.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport Input from \"@material-ui/core/Input\"\nimport Button from \"@material-ui/core/Button\"\n\nconst FormWrapper = styled.form`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-top: 30px;\n    input {\n        width: 400px;\n        height: 35px;\n        font-size: 1.3rem;\n        margin-left: 30px;\n        outline: none;\n        text-align: center;\n    }\n    button {\n        margin-left: 10px;\n        font-weight: bold;\n\n    }\n`\n\n\nconst Form = (props) => {\n    const handleClick = (e) => {// e → clickされたら動く\n        e.preventDefault()//タグの挙動を止める submit=リロード抑止\n        let inputValue = document.getElementsByTagName('input')[0].value\n        if (inputValue.length === 0) {\n            return null\n        } else {\n            props.addTodo(inputValue)//直接入力した値\n            inputValue =  \"\" //追加　　入力完了した文字を消す(初期化)\n        }\n    }\n\n    return (\n\n        <FormWrapper>\n            <Input inputProps={{ 'aria-label': 'description' }} type=\"text\" placeholder=\"今日は何するの？\" />\n            <Button color=\"disabled\" type=\"submit\" onClick={(e) => handleClick(e)}>追加</Button>\n        </FormWrapper>\n    )\n}\n\nexport default Form","import React from \"react\"\nimport styled from \"styled-components\"\nimport Button from \"@material-ui/core/Button\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ImportContactsIcon from '@material-ui/icons/ImportContacts';\n\n\n\nconst Item = (props) => {\n    const [isDone, setIsDone] = React.useState(false)\n    // /*const toggleChange = React.useCallback(() => setTestC((prev) => !prev), [setTestC])//clickしたら切替のみ機能\n\n    const ItemWrapper = styled.li`\n\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        font-size: 1.4rem;\n        border-radius: 5px;\n        background-color: white;\n        line-height: 2.6rem;\n        margin-top: 10px;\n        height: 60px;\n        & p {\n            width: 63%;\n            text-align: left;\n        }\n        & button {\n            width: 50px;\n            height: 45px;\n            margin: 0 5px;\n            padding: 0;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.1s;\n            box-shadow: 0 2px 4px -1px;\n            &:active {\n            transform: translateY(2px);\n            font-size: 0.86rem;\n            box-shadow: none;\n            color: red;\n            }\n        }\n    `\n\n    return (\n\n        <ItemWrapper>\n            <p>{props.todo.content}</p>\n            <IconButton><ImportContactsIcon /></IconButton>\n            <Button\n                variant=\"contained\"\n                color={isDone ? \"secondary\" : \"default\"}\n                onClick={() => setIsDone(!isDone)}>{isDone ? \"済\" : \"未完了\"}</Button>\n            <IconButton onClick={() => props.deleteTodo(props.id)}><DeleteIcon /></IconButton>\n\n        </ItemWrapper>\n    )\n}\n\nexport default Item","import React from \"react\"\nimport styled from \"styled-components\"\n\nimport Item from \"./Item\"\n\n\nconst ListWrapper = styled.ul`\n    width: 550px;\n    margin: 30px auto;\n`\n\nconst List = (props) => {\n\n    return (\n\n        <ListWrapper>\n            {props.todos.map((todo) =>\n                <Item\n                    todo={todo}\n                    key={todo.id}\n                    id={todo.id}\n                    deleteTodo={props.deleteTodo}\n                />\n            )}\n        </ListWrapper>\n    )\n}\n\nexport default List","import React from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nimport Form from \"./Form\";\nimport List from \"./List\";\n\n\n\n\nconst AppWrapper = styled.div`\n  text-align: center;\n  background-color: #d0e1f9; /*目に優しい　ブルーベリー色 */\n  height: 100vh;\n  font-family: \"Lato\", \"Noto Sans JP\", \"ヒラギノ角ゴ ProN\",\n    \"Hiragino Kaku Gothic ProN\", \"メイリオ\", Meiryo, \"ＭＳ Ｐゴシック\",\n    \"MS PGothic\", sans-serif; /*googleのlatoフォント　シンプルでお洒落 今年流行りそう*/\n  h1 {\n    font-size: 35px;\n    font-weight: bold;\n    padding-top: 50px;\n    letter-spacing: 0.1rem;\n  }\n`;\n\nconst GlodalStyle = createGlobalStyle`\n    /* ここに全体に適用させたいcssを書く*/\n    ${reset} /* resetcss */\n    /*　共通するスタイルはglobalStyleとしてまとめる 記述が多くなるなら別フォルダ、ファイル作成*/\n    button {\n        width: 45px;\n        height: 40px;\n        font-weight: bold;\n        margin-left: 5px;\n        border-radius: 20px;\n        outline: none;\n        border: none;\n        cursor: pointer;\n        box-shadow: 0 2px 4px -1px;\n        transition: all 0.1s;\n        &:active {\n            transform: translateY(2px);\n            font-size: 0.86rem;\n            box-shadow: none;\n            color: red;\n        }\n    }\n`;\n\nconst App = () => {\n\nconst [todos, setTodos] = React.useState([\n//書き換える必要があるstateでかんり\n    { id: 1, content: \"朝起きて\" },\n    { id: 2, content: \"昼寝して\" },\n    { id: 3, content: \"夜寝た\" }\n\n])\n\n    const addTodo = (inputText) => {\n        const generateId = () => {\n            const newId = Math.ceil(Math.random() * 100)\n            const duplicateId = todos.find(todo => todo.id === newId)\n            if (duplicateId === undefined) {\n                return newId\n            } else {\n                return generateId()\n            }\n        }\n        //新しいtodoオブジェクト作る\n        const newTodo = {\n            id: generateId(),\n            content: inputText //入力された値\n        }\n        console.log(newTodo)\n        //新しいtodoオブジェクトList追加\n        setTodos(todos.concat(newTodo)) //セット 書き換えている(concat = 一度消去してから書き換える)\n    }\n\n    const deleteTodo = (id) => {\n        setTodos(todos.filter(todo => todo.id !== id))//falseなので取り除かれる　他はtrueなので残る id = 任意でclickするid(削除) item = 要素\n    }\n\n　return (\n    <>\n    　<GlodalStyle />\n    　<AppWrapper>\n            <h1>My ToDo List</h1>\n            <Form addTodo={addTodo} />\n            <List todos={todos} deleteTodo={deleteTodo} />\n    　</AppWrapper>\n    </>\n　);\n};\n\nexport default App;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./components/App\"\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}